Operating systems Final assignment
Installing Arch Linux ARM on a Raspberry Pi
Marc van der Sluys
HAN University of Applied Sciences
Arnhem, The Netherlands http://han.vandersluys.nl
November 14, 2017
1	Introduction
The final assignment for the Operating Systems (OPS) course at the HAN 
consists of the installation, configuration and system maintenance of an 
Arch Linux ARM system on your Raspberry Pi v3. For this you use a 
separate SD card! All data on the SD card will be wiped, so make sure 
you do not use the SD card that is used for IoT or any other purpose. 
When you have finished this project, you will hand in the SD card for 
grading. Once the grades have been established, your card will be 
returned to you.
In this document, we frequently refer to the document Installing Arch 
Linux ARM on a Raspberry Pi (IALARP), which lists the actual steps 
needed to install and configure the system. Before you continue, read 
that document carefully and make sure you understand what is happening 
at every step. If you are in doubt, ask someone (e.g. me) for help!
While you carrying out the installation steps, you will answer questions 
about your system asked in this document. Make sure you write down the 
answers to those questions in a report, as they will be part of the 
grading.
Note that in most Linux environments, selecting a text with your mouse 
also copies it, while pressing the middle mouse button or scroll wheel 
pastes the selection. You can use this to copy commands from the PDFs to 
your ssh terminal. However, always check what you pasted before carrying 
it out. Also make sure you don’t copy a newline, since it may be 
pasted as Enter and carry out the command before you checked it.
2	Preparing the SD card
In the IALARP document:
1.	Read Section 1 (Introduction)
2.	Read and carry out the instructions in Section 2 (Preparing the 
SD card) on your PC or laptop. When you are done, you should be able to 
boot Arch Linux ARM on your Pi.
3	Booting and logging in to your Pi
Read and carry out the instructions in Section 3 of IALARP (Booting and 
logging in). We will log in through ssh, so make sure you connect the Pi 
to an Ethernet cable.
Question 3.1: Disc use
You can see how much of your disc is free (and used) in human-readable 
form using
$ df -h # Disk free, human-readable output
The root partition of your file system (SD card) is mounted in /.
a)	How much of your disc (SD card) has been used by the base 
system? “ 852,292 MB
 
b)	How does the output look without the -h flag?
 



Question 3.2: Memory use
Free (and used) memory can be shown using
$ free -h
• How much of your memory does the base system use? 33 MB
 
4	Configuring your Pi
Read the entire Section 4 of the IALARP document.
4.1	Changing to root
Become root as explained in Sect.4.1 of IALARP.
4.2	Installing emacs
Run the three pacman commands in Section 4.2 of IALARP, thus installing 
the console version of emacs. Look at the output carefully. Now search 
for the emacs packages again.
Question 4.1: How can you tell whether a package is installed?
When no conflicts are found.
Action 4.1: Set the environment variable in your .bashrc
Edit the .bashrc and add set the EDITOR variable. Log out and back in as 
root and check whether the variable is set correctly by typing
$ echo $EDITOR
4.3	System-configuration files
4.3.1 /etc/
In the document IALARP, do Section 4.3.1. Log out and in as root to see 
whether you end up in /etc/.
4.3.2	Git and Bitbucket
Read Section 4.3.2 of IALARP. We will here ignore the last 
recommendation, since we do not (yet) deal with a critical system, and 
push (‘upload’) our git commits to Bitbucket.
Use your browser to create a free account on Bitbucket [1]. Use an email 
address and choose an alias/user name that are fit for me to see, and 
that allow me to recognise you. Do not yet create a repository. See 
Appendix A for instructions.
Action 4.2: Install the package git
Question 4.2: Which version did pacman install?  2.15.1-1
 
Action 4.3: Create a git repository in /etc/
Follow the instructions in Section 4.3.2 of IALARP. Use the same email 
address you used for your Bitbucket account for the (global) 
configuration. Add the files to the repo and commit your changes as 
instructed.
Every file in /etc/ or any of its subdirectories that is added to git 
will belong to this repository (unless you create a new git repo in one 
of those subdirectories).
Action 4.4: Create a git repository on Bitbucket
Use your browser and follow the instructions in Appendix A. Call the 
repository rpi-etc. Give me (user alias han-ese, name HAN ESE)  read 
access to your repository. In your local repo in /etc/, add the remote 
for your Bitbucket repo and push your commit to the server. In your 
browser, reload the page and see whether your commits arrived in good 
order.
4.4	Set the timezone
Carry out the instructions in Section 4.4.
4.5	Installing and allowing sudo
Follow the instructions in the first paragraph of Section 4.5 of IALARP 
to install sudo, but do not yet edit the file. Add and commit the 
original sudoers file to your git repository:
$ git add sudoers
$ git commit -m ’Add original sudoers file to repo’
Now carry out the rest of Sect.4.5 and commit your changes:
$ git diff # Check whether everything is alright before committing
$ git commit -a -m ’Updated sudoers file’
Check the commits you have made so far:
$ git log
Question 4.3: When was the last commit made in your local repository? 
When on the server?
 
Push your commits to the server and check your browser to see whether 
they arrived:
$ git push
Question 4.4: How is your git log different from the previous one?
4.6	Configuring Pacman and AUR
Follow the instructions in Section 4.6 of IALARP, and diff, commit and 
push your changes.
5	System administration
In IALARP, read Section 5.
Upgrade your system to the latest version as described in Section 5.2.
Question 5.1: Which packages were updated?
 
We skip Section 5.4 (Wireless networking) (unless you want to do this 
yourself), but do install the packages mentioned in Section 5.5.
6	Installing packages from AUR
Exit from root and become a normal user again (or log in through a 
second ssh session — we will need the root session again soon). Read 
Section 6 of IALARP and carry out its instructions to install yaourt and 
aurvote. Create an account on AUR [2], using some user name that keeps 
you anonymous and a simple password that you don’t use for 
top-secret stuff. Vote for aurvote.
Go back and read Section 5.2.1 of IALARP on pacnew files.
Question 6.1: What happens when you try to install etc-update as root?
==> ERROR: Running makepkg as root is not allowed as it can cause 
permanent,
catastrophic damage to your system.
Action 6.1: Install etc-update as a normal user
As root, add and commit /etc/etc-update.conf to git. Update the file as 
instructed and diff, commit and push your changes. Install colordiff if 
it isn’t already installed.
Action 6.2: Run etc-update as root (from /etc/)
7    Security


Read Section 7 of IALARP .


7.1     User management

Action 7.1:    Add user/group files  to git

Add the files passwd, shadow, group and gshadow in /etc/ to your git 
repo.


Action 7.2:    Create the user opsstudent

Create  a  home  directory.    Add  as  main  group  users and  as  
additional group  wheel.  Use
/bin/bash as shell.  Give the new user the password  OPSpass.


Action 7.3:    Log  in  as  the new  user

Use SSH. Type  su - in order to check that you can become root as this 
user.  Continue only when this works!


Action 7.4:    Block the old  user alarm

Do not remove the account or home directory.  Verify that you can indeed 
no longer log in.


Question 7.1:     What message do  you  see  when you  try to log  in  
over ssh  as  user alarm? Permission denied, please try again.


7.2     Configuring the SSH  daemon

Set the SSH port to 32123, make sure that root cannot  login and that 
only the user opsstudent can login through  SSH. Restart sshd and use a 
different terminal to log in before you log out as root. 
7.3     Preventing the accidental overwriting of files

Action 7.5:    Test the current functionality of  rm

Create  a temporary file called temp.txt and write a line of text  using 
your text  editor.  Type

$ rm temp.txt


Question 7.2:    Are you  asked to confirm whether the file  should be 
deleted? rm: remove write-protected regular file 'temp.txt'?
Action 7.6:    Add the three aliases to the system-wide bashrc file
Log out and back in.  Create  another  temporary file and remove it with 
the command  above.


Question 7.3:     Are you asked to confirm whether the file  should be 
deleted this time? rm: remove write-protected regular file 'temp.txt'?


8    Setting up your bash environment


Read Section 8 of IALARP .


8.1     Setting your bash prompt

Set a coloured bash prompt  as instructed.  Use a different prompt  for 
the user opsstudent and
root.  Log out and back in to see the effect, both  for the normal  user 
and root.


Question 8.1:    Which colours are used for  both users? wit

8.2     Adding colours to the man pages

Add  the   TERMCAP lines and  the  alias  to  the  system-wide  bashrc 
file.  Log out  and  back  in. Consult  the man page for man.


Question 8.2:    What colour do  the flags  (-m,  etc.) in  the SYNOPSIS 
line  have? 
Blauw
Question 8.3:    What colour do  the options (system,  etc.) in  the 
same line  have?
Rood
 Action 8.1:    Search for  search in  the man man page
Question 8.4:    At which option does the first hit occur?

the manual.  The default action is to search in all  of  the  available




9    Printing boot, shutdown and login messages on the SenseHAT


We want to print a message at boot on the SenseHAT,  stating  the IP 
address(es)  of the Pi.  In addition, we want to print a goodbye message 
at  shutdown,  and  another  message when a user logs in.  We have 
created  the  Python scripts  that do these  things  for you, in an Arch 
package called han-ese-ops rpi in the  AUR.  We will install  that 
package  (and  its dependencies)  and answer a few questions  during  
the install  process (read  the questions  before you start). 
Action 9.1:    Install the package han-ese-ops rpi and inspect the 
PKGBUILD. Question 9.1:    From which website/URL will  the package be 
downloaded?  url="https://github.com/han-ese/Arch-RPi"
Question 9.2:    On  which other packages does this package depend? 
depends=('bash' 'python3' 'python-sense-hat')
You can now finish the installation.

We need to load the i2c dev kernel driver and make sure it is loaded on 
boot:


Action 9.2:    Load the i2c dev driver with modprobe i2c dev

Action 9.3:   Load at boot: echo "i2c-dev" >> 
/etc/modules-load.d/raspberrypi.conf

Loading the driver  should create,  among others,  the I2C device file 
/dev/i2c-1.  Check that it exists.

A normal user should have access to the display of the SenseHAT. In 
order to establish  this, you must  add your user to the video group:


Action 9.4:   Add your user to the video group with usermod -a -G video 
<userName>

Action 9.5:    Test the display of the SenseHAT as  root with the 
command/script
han-ese-ops run-at-boot.sh

Action 9.6:    Test the display of the SenseHAT with the han-ese-ops 
login.py script as  a normal user.

One of the files that is installed  is the system service han-ese-ops in 
the file
/usr/lib/systemd/system/han-ese-ops.service.


Question 9.3:    Which script does the service run when it is started?  
And when it is stopped?
Started: ExecStart=/usr/bin/han-ese-ops_run-at-boot.sh &
Stopped: ExecStop=/usr/bin/han-ese-ops_run-at-shutdown.sh &

Action 9.7:    Enable the service han-ese-ops and reboot your Pi.

Question 9.4:    Which message is printed on  shutdown?  And which on  
boot?
  Booting alarmpi “linux” Eth 0 … … … … 
  Shuting down alarmpi
The file /usr/bin/han-ese-ops login.py was also installed  by the 
han-ese-ops rpi package. 
Action  9.8:       Add the  line   /usr/bin/han-ese-ops login.py & to 
the  end of  your
/etc/bash.bashrc,  and log  out of and back in  to your Pi.

Question 9.5:     What happens to the SenseHAT when you  log  in?   What 
happens when you  su to root? The logged in message comes on the screen 
(opsstudent logged in).


10     Logging the SenseHAT weather to a file  in  a cron job


The SenseHAT can also measure  temperature, relative  humidity and air 
pressure.  By default,  a normal user is not allowed to access these 
values from the I2C bus, but the han-ese-ops service sets the 
permissions  to fix this at each boot.


Question 10.1:   Which line  in  which file  sets the permissions that 
allows anybody to access the I2C device? crw-rw-rw- 1 root root    89,   
1 Dec 21 13:31 i2c-1

The  script  han-ese-ops log-weather.py reads  out  the  temperature 
(◦C), humidity (%) and pressure  (hPa), adds a timestamp and sends 
the output to stdout. Test  whether  the command works from the command  
line, as user and as root.


Question 10.2:  What is the output of the command? 2017-12-30		
10:56:18	29.1	45.8	0.0

A GNU/Linux system logs its messages to /var/log/.  We will need to be 
root in order to write to that directory.


Action 10.1:  Execute the command han-ese-ops log-weather.py >>
/var/log/weather.log three times. Check the resulting weather log  file.

Question 10.3:  What happens if you  replace >> with > in  the previous 
command?
The first line in the weather.log file is overwrite every time when you 
push.

Of course, we do not  want to log the  weather  by hand.  Instead,  the  
script  should be executed every five minutes  whenever the  system  
runs.  For this,  we use cron. Cron is a system  service that runs  a 
given command  e.g. every hour,  day  or month,  or on certain  days  of 
the  week or certain  minutes  of the hour.  The default  cron service 
on an Arch system  is called cronie.


Action 10.2:  Install cronie

Action 10.3:  Enable the cronie system service

A task  that is run  by cron is called a cron job.   The  file or table  
that lists cron job is called a  cron tab.  The  command  crontab -l 
lists  the  cron  jobs  for the  current user,  while the command  
crontab -e starts your favourite  emacs to edit  the  cron tab.  You can 
then  edit  the cron tab,  save the file and quit emacs.  Ensure  the 
cron tab  ends with an empty  line. If there  is an error  in the  
format,  crontab will offer to reedit  the file to fix it.  Be aware  of 
crontab -r, which removes your cron tab!

The cron tab is a table in a text file, with six columns separated by 
spaces — the exact alignment is unimportant. Each line defines one 
cron job.  The first five columns (or words) in a line specify when the  
cron job should  run:  the  minute,  hour,  day of month,  month,  and  
day of week.  An 
asterisk  (∗) indicates  that the job should run at every 
minute/hour/etc. The table  below shows a few examples.

Min	Hr	DoM	Mnt	DoW	Effect
∗	∗	∗	∗	∗	Run every minute  (of every 
hour/day/month)
5	∗	∗	∗	∗	Run 5 minutes  past  the hour 
(of every hour/day/month)
∗/5	∗	∗	∗	∗	Run every 5 minutes  (of every 
hour/day/month)
5	12	∗	∗	∗	Run at 12:05 (on every 
day/month)
5	10-12	∗	∗	∗	Run at 10:05, 11:05 and 12:05 
(on every day/month)
5	12	1	∗	∗	Run at 12:05 on the first day of 
every month
0	0	1	1	∗	Start fireworks once a year
5	12	∗	∗	0	Run at 12:05 on every Sunday

More details  on the  format  of a cron tab  can be found in man 5 
crontab.  The  sixth  column contains  the  command,  as you can type it 
on the  command  line.  It  is a good idea to use full paths to 
executable  and  output files, since the  environment variables  in the  
cron tab  may be different from those in Bash.  Hence, the command  we 
want to run is
/usr/bin/han-ese-ops log-weather.py >> /var/log/weather.log.


Action 10.4:  As  root, create a cron tab with a cron job  that logs  
the weather using the command above every five  minutes. Check the 
results.


11     OPS programming exercises


You can use your Raspberry Pi to make OPS programming exercises 9 and 
10. Ensure  you do this as a normal user, not as root.  In the home 
directory  of your user, do something  like

$ mkdir exercises
$ cd exercises
$ mkdir ex09 ex10

Create  a git repository,  either  in the directory  ~/exercises (one 
repo for both exercises) or one in each of ~/exercises/ex09 and  
~/exercises/10.   Create  one or two  online repositories  in Bitbucket 
and push the local version(s)  to the server.  Give me (HAN ESE, user 
alias han-ese) read permission.


11.1     Exercise 9

For Exercise 9, you start with the product of Exercise 5.  Copy these 
into your directory  ex09, add  the  .c and  .h files and  commit  (and  
push)  them.    Then  start working  on  Exercise  9. Whenever  you 
finish a part  of your code, compile and  test  it,  and  if it works, 
commit  it.  You can push your commits to the server after each commit,  
at the end of the day, or somewhere in between.




12     Creating tarballs and handing in  your pro ject


12.1     Creating a tarball

Source code is often shipped  in a file ending in .tar.gz, called a 
tarball.2  Creating  a tarball happens  in  two stages:   first,  a  tar  
file is created  containing  the  desired  files, which  is then 
compressed.
The tar program  was designed to backup files on tape.  It groups files 
and directories,  preserving their  permissions,  into  a single file, 
which is uncompressed.   To create  (c) a tar  file containing your 
whole /etc/ directory,  as root,  cd to the root directory  (cd /) and 
execute

tar c /etc/ > etc.tar
In order to compress a tar  file and create  a tarball, gzip is the 
default  option:

gzip -9 etc.tar

This  uses the  strongest  compression  available  (-9) and creates  
etc.tar.gz.3   We have already seen how to unpack  tarballs  when we 
installed  yaourt (you shouldn’t  try  that here though).

2 Not  to be mistaken for a male smoker’s  disease.
3 In order  to achieve  stronger compression, use bzip2 or xz. 
12.2     Handing in  your pro ject

In your report,  don’t forget to mention:

•  the ssh port  you used;

•  the username  and password  of your user;

•  the root password.

Please download  my public SSH key from the OPS Final  Assignment web 
page and add it (on its own line) to the ~/.ssh/authorized keys file of 
your normal  user. 
Appendices


Appendix A     Using Bitbucket with git


If you want  free, private  (i.e.,  others  can’t  see it  unless  
you want  them  to)  git repositories, Bitbucket [1]  is a  good  option  
at  the  time  of writing  (2017).4     I use  private  repositories  as 
backup  and/or to share  my code with  select others.   At the  end of a 
day,  a list of emails from different projects  shows me what  I 
achieved that day.

Before you create  an account at  Bitbucket, find an email address  that 
you are willing to share with  others.   Your email address  is how 
Bitbucket recognises you.  When  signing up, give your full name (or as 
much of it as you want to share)  and make up a good password  — 
you’ll have to type it each time you push your commits  to Bitbucket 
(or until  you set up an ssh key).

Once your account has been set up, you are ready to create your first 
repository.  In order to do so, in your home screen, click the plus in 
the blue bar on the left, choose Repository, choose a good (not  too 
long) name, and ensure that your repository  is private and uses Git.

If  you  already  have  a  local  repository,   do  not get  started 
“the  easy  way”,  but  follow the two  steps/three commands  
under  Get started with command line  / I have an  existing pro ject.

$ git remote add Server https://<user>@bitbucket.org/<user>/<repo>.git
$ git push -vu Server master

The command  git remote add adds  a remote  location  called origin.  I 
usually  use the  name Server (or  BB if I intend  to  push  my commits  
to  multiple  remote  locations).   The  git push command  pushes your 
master  branch  to remote (or Server).  You have to specify this only 
once
— after this

$ git push

suffices (though  I add the option  -v to better  see what  happens).
After pushing  your commits  to the Bitbucket server, reload their  web 
page to see your code. The opposite of pushing,  i.e. pulling changes 
that others made from the remote location to your
local repository,  is then  simply done with

$ git pull

If you want to share your private  repo with other  Bitbucket users, 
click Settings / User and group access, type the user name, select Read 
or Write and click on Add. The other  user will receive an email and  
can now clone (i.e.  an “initial  pull”)  your  repo,  and,  if 
given write permission,  also push their  changes.


References

[1] Atlassian. Bitbucket.  URL https://bitbucket.org.  Visited  
2017-08-29.

[2] Arch User Repository  (AUR).  URL https://aur.archlinux.org.  
Visited  2017-10-24.

[3] Preston-Werner, T., Wanstrath, C.  & Hyett, P. GitHub.  URL 
https://github.com.
Visited  2017-08-29.


4 I recommend GitHub [3] for open-source p

